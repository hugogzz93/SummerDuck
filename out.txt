getting dos by name for func global
getting matrix by name for func global
getting matrixDos by name for func global
getting vec by name for func global
getting tres by name for func global
getting realUno by name for func global
getting realDos by name for func global
getting strUno by name for func global
getting strDos by name for func global
getting a by name for func modUno
getting mat by name for func modUno
getting k by name for func modUno
decision
getting a by name for func modUno
getting a by name for func modUno
dec ended @@@
getting b by name for func nulMod
getting b by name for func nulMod
getting a by name for func modDos
getting b by name for func modDos
getting a by name for func modDos
getting a by name for func fibonacci
getting uno by name for func fibonacci
getting dos by name for func fibonacci
decision
getting a by name for func fibonacci
decision
getting a by name for func fibonacci
dec ended @@@
getting a by name for func fibonacci
getting a by name for func fibonacci
dec ended @@@
getting a by name for func factorial
decision
getting a by name for func factorial
getting a by name for func factorial
getting a by name for func factorial
getting a by name for func factorial
dec ended @@@
getting str by name for func principal
ass str
getting str by name for func principal
trimmed hello
getting str by name for func principal
accepted
Function Identifiers
	3: factorial
	2: fibonacci
	1: escribe
	0: modUno
0 global ()
	ENTERO dos (0)
	ENTERO matrix (1)
	ENTERO matrixDos (3)
	ENTERO vec (18)
	ENTERO tres (20)
	REAL realUno (1000)
	REAL realDos (1001)
	CHAR strUno (2000)
	CHAR strDos (2001)
0 escribe ()
1474556320 lee ()
1 modUno (ENTERO a (3000), )
	ENTERO mat (3001)
	ENTERO k (3010)
5 nulMod (REAL b (4000), )
2 modDos (REAL a (4000), ENTERO b (3000), )
0 fibonacci (ENTERO a (3000), )
	ENTERO uno (3001)
	ENTERO dos (3002)
0 factorial (ENTERO a (3000), )
0 principal ()
	CHAR str (5000)
Instructions: global
Instructions: escribe
Instructions: lee
Instructions: modUno
0 [ <, 3000, 10000, -10 ]
1 [ GOTOF, -10, 0, 4 ]
2 [ RET, 0, 0, 10001 ]
3 [ GOTO, 0, 0, 9 ]
4 [ ERA, 0, 0, 0 ]
5 [ -, 3000, 10002, -11 ]
6 [ PARAM, -11, 0, 0 ]
7 [ GOSUB, 0, 0, -12 ]
8 [ RET, 0, 0, -12 ]
Instructions: nulMod
0 [ ERA, 1, 0, 0 ]
1 [ PARAM, 4000, 0, 0 ]
2 [ GOSUB, 1, 0, -13 ]
3 [ RET, 0, 0, 0 ]
Instructions: modDos
0 [ /, 4000, 10004, -14 ]
1 [ -, -14, 10005, -15 ]
2 [ *, 10003, -15, -16 ]
3 [ RET, 0, 0, -16 ]
Instructions: fibonacci
0 [ <=, 3000, 10006, -17 ]
1 [ GOTOF, -17, 0, 8 ]
2 [ <=, 3000, 10007, -18 ]
3 [ GOTOF, -18, 0, 6 ]
4 [ RET, 0, 0, 10008 ]
5 [ GOTO, 0, 0, 7 ]
6 [ RET, 0, 0, 10009 ]
7 [ GOTO, 0, 0, 18 ]
8 [ ERA, 2, 0, 0 ]
9 [ -, 3000, 10010, -19 ]
10 [ PARAM, -19, 0, 0 ]
11 [ GOSUB, 2, 0, -20 ]
12 [ ERA, 2, 0, 0 ]
13 [ -, 3000, 10011, -21 ]
14 [ PARAM, -21, 0, 0 ]
15 [ GOSUB, 2, 0, -22 ]
16 [ +, -20, -22, -23 ]
17 [ RET, 0, 0, -23 ]
Instructions: factorial
0 [ <=, 3000, 10012, -24 ]
1 [ GOTOF, -24, 0, 4 ]
2 [ RET, 0, 0, 3000 ]
3 [ GOTO, 0, 0, 10 ]
4 [ ERA, 3, 0, 0 ]
5 [ -, 3000, 10013, -25 ]
6 [ PARAM, -25, 0, 0 ]
7 [ GOSUB, 3, 0, -26 ]
8 [ *, 3000, -26, -27 ]
9 [ RET, 0, 0, -27 ]
Instructions: principal
0 [ =, 10014, 0, 5000 ]
1 [ ERA, 1, 0, 0 ]
2 [ PARAM, 5000, 0, 0 ]
3 [ GOSUB, 1, 0, -28 ]
constants
0: int    1
1: double 4.000000
2: int    1
3: int    2
4: int    50
5: int    3
6: int    2
7: int    0
8: int    0
9: int    1
10: int    1
11: int    2
12: int    2
13: int    1
14: string "hello"
Starting Virtual Machine...
Executing: 0 of principal: =
Executing: 1 of principal: ERA
Executing: 2 of principal: PARAM
Executing: 3 of principal: GOSUB
@@@@@@@@@@@@@@@@@@@@@@@@@@
escribe
"hello"
Finished Executing
